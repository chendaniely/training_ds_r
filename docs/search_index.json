[
["index.html", "Training Manual Welcome ", " Training Manual Daniel Chen 2020-02-11 Welcome "],
["lesson-materials.html", "Lesson Materials", " Lesson Materials The main source for the training materials come from Software-Carpentry (Wilson 2016), specifically the Bash, Git (Ahmadia et al. 2016), and SQL lessons. More references about Software-Carpentry and the challenges in scientific computing can be found here: (Wilson, n.d.) (Wilson 2009) (Hannay et al. 2009) (Wilson 2008) (Wilson 2006) (Wilson 2005) Software-Carpenty Data-Carpentry The Carpentries DataCamp R for Data Science By: Garrett Grolemund and Hadley Wickham http://r4ds.had.co.nz/ Figure 0.1: R for Data Science Cover References "],
["part-project-setup.html", "(PART) Project setup", " (PART) Project setup "],
["infrastructure.html", "Chapter 1 Infrastructure ", " Chapter 1 Infrastructure "],
["project-template.html", "1.1 Project Template", " 1.1 Project Template Why project templates: https://chendaniely.github.io/sdal/2017/05/30/project_templates/ Other resources: https://github.com/ropensci/rrrpkg https://github.com/benmarwick/rrtools A template for research projects structured as R packages: https://github.com/Pakillo/template project/ # the project/code repository | |- data/ # raw and primary data, are not changed once created | | | +- *project_data/ # subfolder that links to an encrypted data storage container | | | note that nothing here is in the git repository | | | it&#39;s just a shortcut (i.e., link) to a different folder | | |- original/ # raw data, will not be altered | | |- working/ # intermediate datasets from src code | | +- final/ # final datasets used for analysis/models/plots | | | +- more_data/ # some projects will need multiple links | |- src/ # any programmatic code | |- analysis1/ # user1 assigned to the project | +- analysis2/ # user2 assigned to the project | |- R/ # functions | |- tests/ # unit tests | |- output # all output and results from workflows and analyses | |- figures/ # graphs, likely designated for manuscript figures | |- pictures/ # diagrams, images, and other non-graph graphics | +- analysis/ # generated reports for (e.g. rmarkdown output) | |- README.md # the top level description of content | |- .gitignore # git ignore file |- project.Rproj # RStudio project | |- DESCRIPTION # Description file to repo into R package, if applicable +- Makefile # Makefile, if applicable "],
["documentation-and-metadata.html", "Chapter 2 Documentation and Metadata", " Chapter 2 Documentation and Metadata If I asked you next week, next month, 3 months, 1 year from now, where a dataset or figure came from. Would you be able to tell me within 10 minutes? You can write all the metadata information on the toplevel README.md file. If you don’t want to deal with merge conflicts, you can "],
["code-documentaion.html", "2.1 Code documentaion", " 2.1 Code documentaion Each R script should perform a single task (if you have a 1000+ long file, you’re probably doing something wrong). For example: 01-data_ingestion.R 02-data_clean.R 03-data_visualize.R 04-data_output.R Each script should have a short description on the top that explains what it is doing. If the script is part of a pipline. It should also document where the input data/script is coming from. If you wrote a function in the script make sure it has a docstring that explains what it does and what the inputs and outputs are. For example: #&#39; squares a given value #&#39; #&#39; x: a value to square #&#39; return: a numeric value my_square &lt;- function(x): return(x ** 2) Make sure the libraries that are loaded are towards the top of the script. There should not be a library call in the middle of your script. This helps figuring out what packages are needed. Functions you’ve written should be towards the top (and documented) of the script as well. Usually it is under the library loading. This helps separate your functions from the code. If the script does not take too long to run, you should test your script by restarting an R session. And running the script from top to bottom. To reset your R session, you can: Click the red button on the top right corner of rstudio In RStudio: command/ctrl + shift + F10 In RStudio type: .rs.restartR() in the terminal This will make sure you have a totally clean enviornment when you are testing and running your script. It’s even ‘better’ than using ls(list = ls()) since it will also detach loaded packages. 2.1.1 lintr Using a linter helps find potential errors in your code. For example, variables that you don’t use. It also checks to conform code to a common code style, all of which help make code easier to read for other people/collaboratiors. To lint your script, you can run lintr::lint(&#39;my_r_script.R&#39;) RStudio will open a static code analysis “Markers” tab "],
["metadata.html", "2.2 Metadata", " 2.2 Metadata Now that your scripts are documented, you need to start documenting the inputs and outputs of your file. Ideally all the non-original data can be recreated from your R code, and those instructions are placed in a master script file like a Makefile or bash script. But we’ll keep it simple for now, and just document the process. 2.2.0.1 Datasets For each input dataset, a comment about what is in the dataset, where it came from, and what you used it for should all be listed. You can use a format like this: - my_awesome_dataset.csv - ./data/folder/original/awesome/my_awesome_dataset.csv - contains data about how awesome the various datasets are - used to calculate the &#39;awesome&#39; metric We use the original/working/final folders in our data folder. The working and Final datasets should list what script it comes from. - web_scraped_data.RData - data scraped from the web - comes from ./src/dan/web/scraping.R 2.2.0.2 Reports/Posters/etc Create a doc folder on the top level. What ever your ‘final’ version of a poster or report should be here and checked in. 2.2.0.3 Figures and Tables Each figure and table used in the poster should list the script it comes from. The exact method on how to regenerate that figure should be throughly listed - ./output/poster_fig_1.png - scatter plot for the amazing data - generated by: `./src/dan/amazing/plot_code.R` "],
["readme-files.html", "2.3 README files", " 2.3 README files The top level README file should contain all the information about what the project is and how to get started. It should link to (or contain) the metadata information from the previous example. Remember this is the first thing people will see when they open a repository, the more information here about where things are, the better. 2.3.1 Example File # Datasets - my_awesome_dataset.csv - ./data/folder/original/awesome/my_awesome_dataset.csv - contains data about how awesome the various datasets are - used to calculate the &#39;awesome&#39; metric - web_scraped_data.RData - data scraped from the web - comes from ./src/dan/web/scraping.R # Figures - ./output/poster_fig_1.png - scatter plot for the amazing data - generated by: `./src/dan/amazing/plot_code.R` - ./output/poster_fig_2.pdf - violin plotfor the amazing data - generated by: `./src/dan/amazing/plot_code_42.R` "],
["part-version-control.html", "(PART) Version Control", " (PART) Version Control "],
["version-control.html", "Chapter 3 Version Control", " Chapter 3 Version Control Software-Carpentry Git Lesson DataCamp Courses: Introduction to Git for Data Science Working with the RStudio IDE (Part 2) – Chapter 2: Version Control Quick References: Software-Carpentry Reference Git Cheat Sheet (by Github) Jenny Bryan’s “Happy Git and GitHub for the useR” Git interaction from NDP Software Learn Git Branching Git flight rules for when you mess up "],
["git.html", "3.1 Git", " 3.1 Git Git and the “final” version problem If these comics bring back haunting memories, then version control is for you! Technically, renaming copies of files is a form of version control. It allows you to go back to a specific state of a file. As the two comics point out, this usually ends up in a cacophony of files with similar names. What about files and programs that know how to track changes already. I’m mainly thinking about Word documents. "],
["git-setup.html", "3.2 Git setup", " 3.2 Git setup In a terminal: git config --global user.name &quot;Vlad Dracula&quot; git config --global user.email &quot;vlad@tran.sylvan.ia&quot; git config --global color.ui auto git config --global core.editor &quot;nano -w&quot; Optional setup (aliases) git config --global alias.l &#39;log --oneline --graph --decorate --all&#39; git config --global alias.last &#39;log -1 HEAD&#39; git config --global alias.co checkout git config --global alias.br branch git config --global alias.ci commit git config --global alias.st status "],
["git-on-your-own.html", "3.3 Git on your own", " 3.3 Git on your own Figure 3.1: Diagram of Git commands and how they relate to one another. git init: turn the current folder into a git repository git status: let’s you know what is going on run this all the time! git add: put file(s) into your “staging area” git commit -m 'MY COMMIT MESSAGE': commits files in the “staging area” with the given message git diff &lt;file name&gt;: compares saved changes to a file to the last commited version of the file git diff --staged &lt;file name&gt;: compares a staged file to the last commited version of the file git log and git log --oneline: looks at your git history git log --oneline --graph --decorate --all: gives detailed log information about where you are How not to write commit messages: how #not to write #git #commit messages -.-'' pic.twitter.com/5TdiZ1yi5S — Dⓐniel Chen ((???)) April 16, 2015 "],
["working-with-remotes.html", "3.4 Working with remotes", " 3.4 Working with remotes git clone &lt;repo url&gt;: downloads code from a code repository into your current directory git remote -v: lists all the remotes and their short names (e.g., origin, upstream) git remote add &lt;name&gt; &lt;url&gt;: adds the &lt;url&gt; to your remotes and gives it the short name &lt;name&gt; (e.g., git remote add origin &lt;URL&gt;) git remote rm &lt;name&gt;: removes a remote by its shortname git push &lt;where&gt; &lt;what&gt;: pushes code on the &lt;what&gt; branch to the &lt;where&gt; remote (e.g., git push origin master) git pull &lt;where&gt; &lt;what&gt;: pulls does down from the &lt;what&gt; branch from the &lt;where&gt; remote (e.g., git pull origin master) "],
["git-with-branches.html", "3.5 Git with branches", " 3.5 Git with branches Figure 3.2: Review of Git Figure 3.3: What branching looks like in the Git world git branch &lt;new branch name&gt;: creates a new branch called &lt;new branch name&gt; git checkout &lt;new branch name&gt;: goes to the branch, &lt;new branch name&gt; git checkout -b &lt;new branch name&gt;: creates and checksout a branch in a single step git log --oneline --graph --decorate --all: shows you the log in relation to all other branches "],
["collaborating-with-git.html", "3.6 Collaborating with Git", " 3.6 Collaborating with Git This is like working with branches, but instead of you working on a branch, it’s someone else Figure 3.4: The ‘forking’ model of Git workflows Figure 3.5: Git with branches "],
["protecting-branches.html", "3.7 Protecting branches", " 3.7 Protecting branches https://docs.gitlab.com/ee/user/project/protected_branches.html In a repository go to settings &gt; repository &gt; protected branches set “allowed to merge”: masters “allowed to push”: no one "],
["help-faq.html", "3.8 Help! (FAQ)", " 3.8 Help! (FAQ) Link to more “flight rules”, for when you really mess up. 3.8.1 General workflow Make sure your master branch is up to date Go to the master branch: git checkout master Update your master branch: git pull origin master Create a new branch (give it a useful name): git checkout -b my_awesome_task Give your branch a sensible name about what you are working on Don’t just give it your name or pid, nobody knows what you are doing Go code and write commits! git add &lt;my file&gt; git commit -m 'look at all this cool stuff' Push your branch git push origin my_awesome_task Issue a pull request Have someone (maintainers) review your code Does it follow coding style guides? Is the code “good” No datasets are checked in No loops when an apply or map function would suffice There are functions for repetitive code Are you checking your work? Are the assumptions you are making about data tested in code? If you are visually checking/inspecting your data to check your code, is there code written for your visual check? etc (Maintainers) merge the pull request You can also checkoff a box that will also delete the branch on the remote Or delete the branch manually under the branches view Go back to master: git checkout master Pull down your merged code: git pull origin master Delete your branch: git branch -d my_awesome_task (note it is a lower case d) Clean up your branches: git fetch --prune 3.8.2 Git push rejected (master) When you run git status, does it say you’re on master? Please see below: “Accidently did work on master”. 3.8.3 Accidently did work on master: Create a branch where you are now: git branch BRANCH_NAME Find the commit hash of where master is supposed to be git log --oneline --graph --decorate --all Reset master to where you were: git reset --hard COMMIT_HASH_FOR_MASTER make sure you do this on the master branch Go to your branch: git checkout BRANCH_NAME Push your branch: git push origin BRANCH_NAME Create and merge the pull/merge request 3.8.4 Get changes from master on your branch Scenario: You are working on your branch, and the master branch changes (e.g., someone else gets their branch merged into master). The changes in master are also changes you need (e.g., the update to master is a function that you want to use), but you are still working on your branch and not ready to create a pull/merge request and/or merge your changes yet. Go to your master branch: git checkout master Get the new updates from master: git pull origin master Go back to your branch: git checkout my_branch Rebase your branch against master: git rebase master You may or may not need to solve merge conflicts. Force push your branch: git push -f origin my_branch 3.8.5 Remote server (e.g., GitLab, GitHub, Bitbucket, etc) shows merge conflict When you attempt to merge a pull/merge request and tells you that the branch cannot be merged becuase of a merge conflict, you need to follow the same steps from “Get changes from master on your branch”. During the rebasing step, you will be fixing the merge conflict(s). 3.8.6 Remove data/files from history 3.8.6.1 BFG repo cleaner https://rtyley.github.io/bfg-repo-cleaner/ 3.8.6.2 Git filter branch git filter-branch --force --index-filter \\ &#39;git rm --cached --ignore-unmatch &lt;PATH_TO_FILE&gt;&#39; \\ --prune-empty --tag-name-filter cat -- --all as a single line: git filter-branch --force --index-filter &#39;git rm --cached --ignore-unmatch &lt;PATH_TO_FILE&gt;&#39; --prune-empty --tag-name-filter cat -- --all "],
["part-rstudio.html", "(PART) RStudio", " (PART) RStudio "],
["rstudio.html", "Chapter 4 RStudio ", " Chapter 4 RStudio "],
["restarting-rstudio-session.html", "4.1 Restarting RStudio Session", " 4.1 Restarting RStudio Session 4.1.1 Within RStudio Session &gt; Restart R (Ctrl + Shift + F10) 4.1.2 From the terminal When RStudio locks up and you need to restart it. Note you will need to be on the VPN if you are not on the VT wireless. Open a terminal Look for your rstudio process by running: ps aux | grep rstudio &gt; ps aux | grep chend | grep rstudio chend 163630 0.3 0.0 743120 100936 ? Sl 09:51 0:04 /usr/lib/rstudio-server/bin/rsession -u chend --launcher-token 59FDC2A5 chend 182064 0.0 0.0 112708 968 pts/0 S+ 10:14 0:00 grep --color=auto rstudio Note which process rstudio is running on by looking at the 2nd column in the output (next to your pid), in this example the process number is 163630 Stop the process: kill -9 &lt;Process number here&gt; "],
["accessing-folders.html", "4.2 Accessing folders", " 4.2 Accessing folders 4.2.1 Outside of Home Sometimes you might want to navigate outside your home directory. To do this first click the 3 dots in the files panel to manually input a directory. Figure 3.6: Go to a specific directory Then you can manually navigate into a different path. Figure 0.1: Manually input directory This example specifically shows navigating to the /home/sdal/projects directory. However, you might want to check your project’s data folder, a link to the relevant data folder should already be in there. "],
["part-r.html", "(PART) R", " (PART) R "],
["functions.html", "Chapter 5 Functions ", " Chapter 5 Functions "],
["writing-functions.html", "5.1 Writing Functions", " 5.1 Writing Functions 5.1.1 Fahrenheit to Kelvin \\(k = ((f - 32) * (5 / 9)) + 273.15\\) ((32 - 32) * (5 / 9)) + 273.15 ## [1] 273.15 ((212 - 32) * (5 / 9)) + 273.15 ## [1] 373.15 ((-42 - 32) * (5 / 9)) + 273.15 ## [1] 232.0389 f_k &lt;- function(f_temp) { ((f_temp - 32) * (5 / 9)) + 273.15 } f_k(32) ## [1] 273.15 f_k(212) ## [1] 373.15 f_k(-42) ## [1] 232.0389 5.1.2 Kelvin to Celsius k_c &lt;- function(temp_k) { temp_c &lt;- temp_k - 273.15 return(temp_c) } k_c(0) ## [1] -273.15 5.1.3 Fahrenheit to Celsius f_c &lt;- function(temp_f) { temp_k &lt;- f_k(temp_f) temp_c &lt;- k_c(temp_k) return(temp_c) } f_c(32) ## [1] 0 f_c(212) ## [1] 100 "],
["testing-functions.html", "5.2 Testing Functions", " 5.2 Testing Functions library(testthat) testthat::expect_equal(f_c(32), 0) testthat::expect_equal(f_c(212), 100) "],
["exercise.html", "5.3 Exercise", " 5.3 Exercise What happens if you use NA, Inf, -Inf in your function? What are some better names to give the functions we wrote? How would you name these functions in a package? "],
["checking-values.html", "5.4 Checking values", " 5.4 Checking values Calculating weighted means mean_wt &lt;- function(x, w) { sum(x * w) / sum(w) } mean_wt(1:6, 1:6) ## [1] 4.333333 If you expect the lengths to be the same, then you should test for it in the function mean_wt(1:6, 1:3) ## [1] 7.666667 mean_wt &lt;- function(x, w) { if (length(x) != length(w)) { stop(&quot;`x` and `w` should be the same length&quot;) } sum(x * w) / sum(w) } mean_wt(1:6, 1:3) ## Error in mean_wt(1:6, 1:3): `x` and `w` should be the same length "],
["dot-dot-dot.html", "5.5 dot-dot-dot …", " 5.5 dot-dot-dot … Use it to pass on arguments to another function inside. But you can also use it to force named arguments in your function. sum_3 &lt;- function(x, y, z) { return(x + y + z) } sum_3(1, 2, 3) ## [1] 6 sum_3 &lt;- function(x, y, ..., z) { return(x + y + z) } sum_3(1, 2, z = 3) ## [1] 6 sum_3(1, 2, z = 3) ## [1] 6 "],
["conditionals.html", "Chapter 6 Conditionals ", " Chapter 6 Conditionals "],
["if-statements.html", "6.1 if statements", " 6.1 if statements # make a modification to this function k_c &lt;- function(temp_k) { if (temp_k &lt; 0) { warning(&#39;you passed in a negative Kelvin number&#39;) # stop() return(NA) } temp_c &lt;- temp_k - 273.15 return(temp_c) } k_c(-9) ## Warning in k_c(-9): you passed in a negative Kelvin number ## [1] NA Our current function does not deal with missing numbers k_c(NA) Error in if (temp_k &lt; 0) { : missing value where TRUE/FALSE needed k_c(0) ## [1] -273.15 "],
["if-else-statements.html", "6.2 If else statements", " 6.2 If else statements k_c &lt;- function(temp_k) { if (temp_k &lt; 0) { warning(&#39;you passed in a negative Kelvin number&#39;) # stop() return(NA) } else { temp_c &lt;- temp_k - 273.15 return(temp_c) } } k_c(-9) ## Warning in k_c(-9): you passed in a negative Kelvin number ## [1] NA Our current function does not deal with missing numbers k_c(NA) k_c(0) ## [1] -273.15 "],
["dealing-with-na.html", "6.3 Dealing with NA", " 6.3 Dealing with NA Re-write our function to work with missing values. Note you need to make the NA check first. k_c &lt;- function(temp_k) { if (is.na(temp_k)) { return(NA) } else if (temp_k &lt; 0) { warning(&#39;you passed in a negative Kelvin number&#39;) # stop() return(NA) } else { temp_c &lt;- temp_k - 273.15 return(temp_c) } } k_c(-9) ## Warning in k_c(-9): you passed in a negative Kelvin number ## [1] NA k_c(NA) ## [1] NA k_c(0) ## [1] -273.15 if (c(TRUE, FALSE)) {} ## Warning in if (c(TRUE, FALSE)) {: the condition has length &gt; 1 and only the ## first element will be used ## NULL if (NA) {} ## Error in if (NA) {: missing value where TRUE/FALSE needed use &amp;&amp; and || to short-circuit the boolean comparisons. This will also guarantee a value of length 1L. == is also vectorized, should use identical() or all.equal(). identical is very strict. Doesn’t corece types. identical(0L, 0) ## [1] FALSE all.equal has ability to set tolerances. all.equal: compare R objects x and y testing ‘near equality’. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions—either use isTRUE(all.equal(….)) or identical if appropriate. all.equal(0L, 0) ## [1] TRUE if (isTRUE(all.equal(0L, 0))) {print(&quot;Hello&quot;)} ## [1] &quot;Hello&quot; "],
["fizzbuzz.html", "6.4 Fizzbuzz", " 6.4 Fizzbuzz fizzbuzz &lt;- function(x) { # these two lines check that x is a valid input stopifnot(length(x) == 1) stopifnot(is.numeric(x)) if (!(x %% 3) &amp;&amp; !(x %% 5)) { &quot;fizzbuzz&quot; } else if (!(x %% 3)) { &quot;fizz&quot; } else if (!(x %% 5)) { &quot;buzz&quot; } else { # ensure that the function returns a character vector as.character(x) } } fizzbuzz(6) ## [1] &quot;fizz&quot; Check modulo 3 only once fizzbuzz2 &lt;- function(x) { # these two lines check that x is a valid input stopifnot(length(x) == 1) stopifnot(is.numeric(x)) if (!(x %% 3)) { if (!(x %% 5)) { &quot;fizzbuzz&quot; } else { &quot;fizz&quot; } } else if (!(x %% 5)) { &quot;buzz&quot; } else { # ensure that the function returns a character vector as.character(x) } } fizzbuzz(6) ## [1] &quot;fizz&quot; 6.4.1 Vectorized conditionals library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union fizzbuzz_vec &lt;- function(x) { dplyr::case_when( !(x %% 3) &amp; !(x %% 5) ~ &quot;fizzbuzz&quot;, !(x %% 3) ~ &quot;fizz&quot;, !(x %% 5) ~ &quot;buzz&quot;, TRUE ~ as.character(x) ) } fizzbuzz(1:10) ## Error in fizzbuzz(1:10): length(x) == 1 is not TRUE fizzbuzz_vec(1:10) ## [1] &quot;1&quot; &quot;2&quot; &quot;fizz&quot; &quot;4&quot; &quot;buzz&quot; &quot;fizz&quot; &quot;7&quot; &quot;8&quot; &quot;fizz&quot; &quot;buzz&quot; 6.4.2 Multiple conditions if (this) { # do that } else if (that) { # do something else } else { # } 6.4.2.1 switch calc_op &lt;- function(x, y, op) { switch(op, plus = x + y, minus = x - y, times = x * y, divide = x / y, stop(&quot;Unknown op!&quot;) ) } calc_op(10, 20, &quot;times&quot;) ## [1] 200 calc_op(10, 20, &quot;divide&quot;) ## [1] 0.5 6.4.2.2 cut describe_temp &lt;- function(temp) { if (temp &lt;= 0) { &quot;freezing&quot; } else if (temp &lt;= 10) { &quot;cold&quot; } else if (temp &lt;= 20) { &quot;cool&quot; } else if (temp &lt;= 30) { &quot;warm&quot; } else { &quot;hot&quot; } } describe_temp(16) ## [1] &quot;cool&quot; Current function can’t handle vectors describe_temp(c(16, 61)) ## Warning in if (temp &lt;= 0) {: the condition has length &gt; 1 and only the first ## element will be used ## Warning in if (temp &lt;= 10) {: the condition has length &gt; 1 and only the first ## element will be used ## Warning in if (temp &lt;= 20) {: the condition has length &gt; 1 and only the first ## element will be used ## [1] &quot;cool&quot; How cut works: values &lt;- -10:10 values ## [1] -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 ## [20] 9 10 cut(values, c(-Inf, -5, -1, 1, 7, Inf)) ## [1] (-Inf,-5] (-Inf,-5] (-Inf,-5] (-Inf,-5] (-Inf,-5] (-Inf,-5] (-5,-1] ## [8] (-5,-1] (-5,-1] (-5,-1] (-1,1] (-1,1] (1,7] (1,7] ## [15] (1,7] (1,7] (1,7] (1,7] (7, Inf] (7, Inf] (7, Inf] ## Levels: (-Inf,-5] (-5,-1] (-1,1] (1,7] (7, Inf] cut(values, c(-Inf, -5, -1, 1, 7, Inf), labels = LETTERS[1:5], right = TRUE) ## [1] A A A A A A B B B B C C D D D D D D E E E ## Levels: A B C D E cut(values, c(-Inf, -5, -1, 1, 7, Inf), labels = LETTERS[1:5], right = FALSE) ## [1] A A A A A B B B B C C D D D D D D E E E E ## Levels: A B C D E "],
["exercise-1.html", "6.5 Exercise", " 6.5 Exercise Rewrite the function using cut describe_temp &lt;- function(temp) { if (temp &lt;= 0) { &quot;freezing&quot; } else if (temp &lt;= 10) { &quot;cold&quot; } else if (temp &lt;= 20) { &quot;cool&quot; } else if (temp &lt;= 30) { &quot;warm&quot; } else { &quot;hot&quot; } } How do you indicate &lt; and &lt;=? "],
["iteration.html", "Chapter 7 Iteration ", " Chapter 7 Iteration "],
["broadcasting.html", "7.1 Broadcasting", " 7.1 Broadcasting f_values &lt;- c(0, 32, 212, -40) f_values * 10 ## [1] 0 320 2120 -400 f_values * c(10, 100) ## [1] 0 3200 2120 -4000 "],
["for-loops.html", "7.2 For loops", " 7.2 For loops Temp conversion functions f_k &lt;- function(f_temp) { ((f_temp - 32) * (5 / 9)) + 273.15 } k_c &lt;- function(temp_k) { if (is.na(temp_k)) { return(NA) } else if (temp_k &lt; 0) { warning(&#39;you passed in a negative Kelvin number&#39;) # stop() return(NA) } else { temp_c &lt;- temp_k - 273.15 return(temp_c) } } f_c &lt;- function(temp_f) { temp_k &lt;- f_k(temp_f) temp_c &lt;- k_c(temp_k) return(temp_c) } for (pizza in f_values) { print(pizza) converted &lt;- f_c(pizza) print(converted) } ## [1] 0 ## [1] -17.77778 ## [1] 32 ## [1] 0 ## [1] 212 ## [1] 100 ## [1] -40 ## [1] -40 # 1:length(f_values) # seq_along(f_values) for (i in seq_along(f_values)) { print(i) val &lt;- f_values[i] print(val) converted &lt;- f_c(val) print(converted) } ## [1] 1 ## [1] 0 ## [1] -17.77778 ## [1] 2 ## [1] 32 ## [1] 0 ## [1] 3 ## [1] 212 ## [1] 100 ## [1] 4 ## [1] -40 ## [1] -40 7.2.1 Pre allocating in a loop # prepopulate an empty vector converted_values &lt;- vector(&quot;double&quot;, length(f_values)) for (to_be_converted_position in seq_along(f_values)) { converted &lt;- f_c(to_be_converted_position) converted_values[to_be_converted_position] &lt;- converted } converted_values ## [1] -17.22222 -16.66667 -16.11111 -15.55556 "],
["purrr-map.html", "7.3 purrr (map)", " 7.3 purrr (map) library(purrr) map(f_values, f_c) ## [[1]] ## [1] -17.77778 ## ## [[2]] ## [1] 0 ## ## [[3]] ## [1] 100 ## ## [[4]] ## [1] -40 map_dbl(f_values, f_c) ## [1] -17.77778 0.00000 100.00000 -40.00000 mtcars ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 map(mtcars, class) ## $mpg ## [1] &quot;numeric&quot; ## ## $cyl ## [1] &quot;numeric&quot; ## ## $disp ## [1] &quot;numeric&quot; ## ## $hp ## [1] &quot;numeric&quot; ## ## $drat ## [1] &quot;numeric&quot; ## ## $wt ## [1] &quot;numeric&quot; ## ## $qsec ## [1] &quot;numeric&quot; ## ## $vs ## [1] &quot;numeric&quot; ## ## $am ## [1] &quot;numeric&quot; ## ## $gear ## [1] &quot;numeric&quot; ## ## $carb ## [1] &quot;numeric&quot; map_chr(mtcars, class) ## mpg cyl disp hp drat wt qsec vs ## &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## am gear carb ## &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; map_dbl(mtcars, mean) ## mpg cyl disp hp drat wt qsec ## 20.090625 6.187500 230.721875 146.687500 3.596563 3.217250 17.848750 ## vs am gear carb ## 0.437500 0.406250 3.687500 2.812500 map(mtcars, summary) ## $mpg ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 10.40 15.43 19.20 20.09 22.80 33.90 ## ## $cyl ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 4.000 4.000 6.000 6.188 8.000 8.000 ## ## $disp ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 71.1 120.8 196.3 230.7 326.0 472.0 ## ## $hp ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 52.0 96.5 123.0 146.7 180.0 335.0 ## ## $drat ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 2.760 3.080 3.695 3.597 3.920 4.930 ## ## $wt ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.513 2.581 3.325 3.217 3.610 5.424 ## ## $qsec ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 14.50 16.89 17.71 17.85 18.90 22.90 ## ## $vs ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.4375 1.0000 1.0000 ## ## $am ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.4062 1.0000 1.0000 ## ## $gear ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 3.000 3.000 4.000 3.688 4.000 5.000 ## ## $carb ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.000 2.000 2.000 2.812 4.000 8.000 7.3.1 Exercise Compute the mean of every column in mtcars. Determine the type of each column in nycflights13::flights. Compute the number of unique values in each column of iris. (Hint: you may want to write a function) Generate 10 random normals from distributions with means of -10, 0, 10, and 100. 7.3.1.1 Solutions # 1. Compute the mean of every column in mtcars purrr::map_dbl(mtcars, mean) ## mpg cyl disp hp drat wt qsec ## 20.090625 6.187500 230.721875 146.687500 3.596563 3.217250 17.848750 ## vs am gear carb ## 0.437500 0.406250 3.687500 2.812500 # 2. Determine the type of each column in nycflights13::flights. purrr::map_chr(nycflights13::flights, class) ## Error: Result 19 must be a single string, not a character vector of length 2 purrr::map(nycflights13::flights, class) ## $year ## [1] &quot;integer&quot; ## ## $month ## [1] &quot;integer&quot; ## ## $day ## [1] &quot;integer&quot; ## ## $dep_time ## [1] &quot;integer&quot; ## ## $sched_dep_time ## [1] &quot;integer&quot; ## ## $dep_delay ## [1] &quot;numeric&quot; ## ## $arr_time ## [1] &quot;integer&quot; ## ## $sched_arr_time ## [1] &quot;integer&quot; ## ## $arr_delay ## [1] &quot;numeric&quot; ## ## $carrier ## [1] &quot;character&quot; ## ## $flight ## [1] &quot;integer&quot; ## ## $tailnum ## [1] &quot;character&quot; ## ## $origin ## [1] &quot;character&quot; ## ## $dest ## [1] &quot;character&quot; ## ## $air_time ## [1] &quot;numeric&quot; ## ## $distance ## [1] &quot;numeric&quot; ## ## $hour ## [1] &quot;numeric&quot; ## ## $minute ## [1] &quot;numeric&quot; ## ## $time_hour ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; # Compute the number of unique values in each column of iris. count_unique &lt;- function(x) { return(length(unique(x))) } purrr::map_int(iris, count_unique) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 35 23 43 22 3 purrr::map_int(iris, function(x) length(unique(x))) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 35 23 43 22 3 purrr::map_int(iris, ~ length(unique(.))) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 35 23 43 22 3 # Generate 10 random normals from distributions with means of -10, 0, 10, and 100. purrr::map(c(-10, 0, 10, 100), ~ rnorm(n = 10, mean = .)) ## [[1]] ## [1] -8.629042 -10.564698 -9.636872 -9.367137 -9.595732 -10.106125 ## [7] -8.488478 -10.094659 -7.981576 -10.062714 ## ## [[2]] ## [1] 1.3048697 2.2866454 -1.3888607 -0.2787888 -0.1333213 0.6359504 ## [7] -0.2842529 -2.6564554 -2.4404669 1.3201133 ## ## [[3]] ## [1] 9.693361 8.218692 9.828083 11.214675 11.895193 9.569531 9.742731 ## [8] 8.236837 10.460097 9.360005 ## ## [[4]] ## [1] 100.45545 100.70484 101.03510 99.39107 100.50496 98.28299 99.21554 ## [8] 99.14909 97.58579 100.03612 "],
["fitting-models.html", "7.4 Fitting models", " 7.4 Fitting models models &lt;- mtcars %&gt;% split(.$cyl) %&gt;% map(function(df) lm(mpg ~ wt, data = df)) models %&gt;% map(summary) %&gt;% map_dbl(~ .$r.squared) ## 4 6 8 ## 0.5086326 0.4645102 0.4229655 models %&gt;% map_df(broom::tidy) ## # A tibble: 6 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 39.6 4.35 9.10 0.00000777 ## 2 wt -5.65 1.85 -3.05 0.0137 ## 3 (Intercept) 28.4 4.18 6.79 0.00105 ## 4 wt -2.78 1.33 -2.08 0.0918 ## 5 (Intercept) 23.9 3.01 7.94 0.00000405 ## 6 wt -2.19 0.739 -2.97 0.0118 "],
["apply-in-base-r.html", "7.5 Apply (in base R)", " 7.5 Apply (in base R) apply family of functions 7.5.1 lapply lapply(f_values, f_c) ## [[1]] ## [1] -17.77778 ## ## [[2]] ## [1] 0 ## ## [[3]] ## [1] 100 ## ## [[4]] ## [1] -40 7.5.2 sapply sapply(f_values, f_c) ## [1] -17.77778 0.00000 100.00000 -40.00000 7.5.3 vapply vapply(f_values, f_c, numeric(1)) ## [1] -17.77778 0.00000 100.00000 -40.00000 7.5.4 mapply v1 &lt;- c(1, 2, 3, 4) v2 &lt;- c(100, 200, 300, 400) my_mean &lt;- function(x, y){ return((x + y) / 2) } # sapply(v1, v2, my_mean) mapply(my_mean, v1, v2) ## [1] 50.5 101.0 151.5 202.0 # this is the same as purrr::map2 7.5.5 apply (2-dimensions) apply(mtcars, MARGIN = 1, mean) ## Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive ## 29.90727 29.98136 23.59818 38.73955 ## Hornet Sportabout Valiant Duster 360 Merc 240D ## 53.66455 35.04909 59.72000 24.63455 ## Merc 230 Merc 280 Merc 280C Merc 450SE ## 27.23364 31.86000 31.78727 46.43091 ## Merc 450SL Merc 450SLC Cadillac Fleetwood Lincoln Continental ## 46.50000 46.35000 66.23273 66.05855 ## Chrysler Imperial Fiat 128 Honda Civic Toyota Corolla ## 65.97227 19.44091 17.74227 18.81409 ## Toyota Corona Dodge Challenger AMC Javelin Camaro Z28 ## 24.88864 47.24091 46.00773 58.75273 ## Pontiac Firebird Fiat X1-9 Porsche 914-2 Lotus Europa ## 57.37955 18.92864 24.77909 24.88027 ## Ford Pantera L Ferrari Dino Maserati Bora Volvo 142E ## 60.97182 34.50818 63.15545 26.26273 apply(mtcars, MARGIN = 2, mean) ## mpg cyl disp hp drat wt qsec ## 20.090625 6.187500 230.721875 146.687500 3.596563 3.217250 17.848750 ## vs am gear carb ## 0.437500 0.406250 3.687500 2.812500 "],
["safely-dealing-with-failure.html", "7.6 Safely dealing with failure", " 7.6 Safely dealing with failure safely is a function that takes a function, and returns a modified version of that function. Like how decorators work in Python. safe_log &lt;- safely(log) safe_log(10) ## $result ## [1] 2.302585 ## ## $error ## NULL safe_log(&quot;a&quot;) ## $result ## NULL ## ## $error ## &lt;simpleError in .Primitive(&quot;log&quot;)(x, base): non-numeric argument to mathematical function&gt; x &lt;- list(1, 10, &quot;a&quot;) y &lt;- x %&gt;% map(safely(log)) str(y) ## List of 3 ## $ :List of 2 ## ..$ result: num 0 ## ..$ error : NULL ## $ :List of 2 ## ..$ result: num 2.3 ## ..$ error : NULL ## $ :List of 2 ## ..$ result: NULL ## ..$ error :List of 2 ## .. ..$ message: chr &quot;non-numeric argument to mathematical function&quot; ## .. ..$ call : language .Primitive(&quot;log&quot;)(x, base) ## .. ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;simpleError&quot; &quot;error&quot; &quot;condition&quot; You can specify the error value safe_log &lt;- safely(log, otherwise = NA) x &lt;- list(1, 10, &quot;a&quot;) y &lt;- x %&gt;% map(safe_log) Extract values out manually y %&gt;% purrr::map_dbl(magrittr::extract(1)) ## [1] 0.000000 2.302585 NA Use the transpose function y &lt;- y %&gt;% purrr::transpose() str(y) ## List of 2 ## $ result:List of 3 ## ..$ : num 0 ## ..$ : num 2.3 ## ..$ : logi NA ## $ error :List of 3 ## ..$ : NULL ## ..$ : NULL ## ..$ :List of 2 ## .. ..$ message: chr &quot;non-numeric argument to mathematical function&quot; ## .. ..$ call : language .Primitive(&quot;log&quot;)(x, base) ## .. ..- attr(*, &quot;class&quot;)= chr [1:3] &quot;simpleError&quot; &quot;error&quot; &quot;condition&quot; y$result %&gt;% purrr::flatten_dbl() ## [1] 0.000000 2.302585 NA "],
["possibly-and-quietly-succeeds.html", "7.7 Possibly and quietly succeeds", " 7.7 Possibly and quietly succeeds Possibly always succeeds by giving it a default value. Safely defaults to NULL, possibly requres the otherwise parameter x &lt;- list(1, 10, &quot;a&quot;) x %&gt;% map_dbl(possibly(log, NA_real_)) ## [1] 0.000000 2.302585 NA quietly captures output, messages, and warnings, instead of errors x &lt;- list(1, -1) x %&gt;% map(quietly(log)) %&gt;% str() ## List of 2 ## $ :List of 4 ## ..$ result : num 0 ## ..$ output : chr &quot;&quot; ## ..$ warnings: chr(0) ## ..$ messages: chr(0) ## $ :List of 4 ## ..$ result : num NaN ## ..$ output : chr &quot;&quot; ## ..$ warnings: chr &quot;NaNs produced&quot; ## ..$ messages: chr(0) x %&gt;% map(quietly(log)) %&gt;% purrr::transpose() %&gt;% str() ## List of 4 ## $ result :List of 2 ## ..$ : num 0 ## ..$ : num NaN ## $ output :List of 2 ## ..$ : chr &quot;&quot; ## ..$ : chr &quot;&quot; ## $ warnings:List of 2 ## ..$ : chr(0) ## ..$ : chr &quot;NaNs produced&quot; ## $ messages:List of 2 ## ..$ : chr(0) ## ..$ : chr(0) "],
["mapping-over-different-arguments.html", "7.8 Mapping over different arguments", " 7.8 Mapping over different arguments map2 and pmap varying just a single value mu &lt;- list(5, 10, -3) mu %&gt;% map(rnorm, n = 5) %&gt;% str() ## List of 3 ## $ : num [1:5] 5.21 4.64 5.76 4.27 3.63 ## $ : num [1:5] 10.43 9.19 11.44 9.57 10.66 ## $ : num [1:5] -2.68 -3.78 -1.42 -2.36 -2.91 varying both mu and sigmna sigma &lt;- list(1, 5, 10) map2(mu, sigma, rnorm, n = 5) %&gt;% str() ## List of 3 ## $ : num [1:5] 5.28 5.68 5.09 2.01 5.28 ## $ : num [1:5] 8.16 10.93 12.91 17 6.36 ## $ : num [1:5] 10.025 0.358 7.385 6.207 4.209 variying across mu, sigma, and n n &lt;- list(1, 3, 5) args &lt;- list(mean = mu, sd = sigma, n = n) pmap(args, rnorm) %&gt;% str() ## List of 3 ## $ : num 3.96 ## $ : num [1:3] 9.55 13.12 5.23 ## $ : num [1:5] -8.43 2.81 4.68 1.64 -11.86 If your data is all the same length it can be stored in a dataframe. Or if you have a dataframe of values you are planning to “apply” over. library(tibble) params &lt;- tribble( ~mean, ~sd, ~n, 5, 1, 1, 10, 5, 3, -3, 10, 5 ) params %&gt;% pmap(rnorm) ## [[1]] ## [1] 3.900219 ## ## [[2]] ## [1] 17.56354 11.28961 10.44220 ## ## [[3]] ## [1] -4.208965 -14.943289 3.119969 -5.171398 -4.827567 Having a dataframe and using list columns, you can change the function an it’s arguments with invoke_map f &lt;- c(&quot;runif&quot;, &quot;rnorm&quot;, &quot;rpois&quot;) param &lt;- list( list(min = -1, max = 1), list(sd = 5), list(lambda = 10) ) invoke_map(f, param, n = 5) %&gt;% str() ## List of 3 ## $ : num [1:5] 0.649 0.185 0.589 0.538 0.836 ## $ : num [1:5] 5.46 -3.23 3.33 4.09 -2.8 ## $ : int [1:5] 12 17 13 13 6 library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union sim &lt;- tribble( ~f, ~params, &quot;runif&quot;, list(min = -1, max = 1), &quot;rnorm&quot;, list(sd = 5), &quot;rpois&quot;, list(lambda = 10) ) sim_invoked &lt;- sim %&gt;% mutate(sim = invoke_map(f, params, n = 10)) sim_invoked ## # A tibble: 3 x 3 ## f params sim ## &lt;chr&gt; &lt;list&gt; &lt;list&gt; ## 1 runif &lt;named list [2]&gt; &lt;dbl [10]&gt; ## 2 rnorm &lt;named list [1]&gt; &lt;dbl [10]&gt; ## 3 rpois &lt;named list [1]&gt; &lt;int [10]&gt; sim_invoked$sim ## [[1]] ## [1] -0.03082414 -0.49508312 -0.48062004 0.08403188 0.29975168 -0.32716174 ## [7] -0.87810051 -0.09737830 0.67751007 0.14927467 ## ## [[2]] ## [1] -1.881454 6.205581 -4.738676 8.839889 4.586639 -4.473877 ## [7] -3.440830 -4.992420 -10.536207 4.287095 ## ## [[3]] ## [1] 13 9 10 7 6 14 7 15 10 6 "],
["exercise-3.html", "7.9 Exercise", " 7.9 Exercise Write a pipeline that caclculates the mean of each simulation sim_invoked %&gt;% mutate(estimate = map_dbl(sim, mean)) ## # A tibble: 3 x 4 ## f params sim estimate ## &lt;chr&gt; &lt;list&gt; &lt;list&gt; &lt;dbl&gt; ## 1 runif &lt;named list [2]&gt; &lt;dbl [10]&gt; -0.110 ## 2 rnorm &lt;named list [1]&gt; &lt;dbl [10]&gt; -0.614 ## 3 rpois &lt;named list [1]&gt; &lt;int [10]&gt; 9.7 "],
["walk.html", "7.10 Walk", " 7.10 Walk the map set of functions return function values, you use walk if you are only interested in the function side effects. E.g., saving out to a file. x &lt;- list(1, &quot;a&quot;, 3) x %&gt;% walk(print) ## [1] 1 ## [1] &quot;a&quot; ## [1] 3 list of plots with file names, you can use pwalk to save library(ggplot2) plots &lt;- mtcars %&gt;% split(.$cyl) %&gt;% map(~ggplot(., aes(mpg, wt)) + geom_point()) paths &lt;- stringr::str_c(names(plots), &quot;.pdf&quot;) # pwalk(list(paths, plots), ggsave, path = tempdir()) "],
["other-predicates.html", "7.11 Other predicates", " 7.11 Other predicates keep, discard only keeps or discards TRUE values iris %&gt;% keep(is.factor) %&gt;% str() ## &#39;data.frame&#39;: 150 obs. of 1 variable: ## $ Species: Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... some and every work like any and all x &lt;- list(1:5, letters, list(10)) x %&gt;% some(is_character) ## [1] TRUE detect and detect_index finds the first element x &lt;- sample(10) x ## [1] 2 8 7 3 5 6 4 1 10 9 x %&gt;% detect(~ . &gt; 5) ## [1] 8 head_while tail_while returns the head or tail while something is true x ## [1] 2 8 7 3 5 6 4 1 10 9 x %&gt;% head_while(~ . &gt; 5) ## integer(0) x %&gt;% tail_while(~ . &gt; 5) ## [1] 10 9 reduce applies a function until there is only one left. Useful for repeadily joinging dataframes together dfs &lt;- list( age = tibble(name = &quot;John&quot;, age = 30), sex = tibble(name = c(&quot;John&quot;, &quot;Mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), trt = tibble(name = &quot;Mary&quot;, treatment = &quot;A&quot;) ) dfs ## $age ## # A tibble: 1 x 2 ## name age ## &lt;chr&gt; &lt;dbl&gt; ## 1 John 30 ## ## $sex ## # A tibble: 2 x 2 ## name sex ## &lt;chr&gt; &lt;chr&gt; ## 1 John M ## 2 Mary F ## ## $trt ## # A tibble: 1 x 2 ## name treatment ## &lt;chr&gt; &lt;chr&gt; ## 1 Mary A dfs %&gt;% reduce(full_join) ## Joining, by = &quot;name&quot; ## Joining, by = &quot;name&quot; ## # A tibble: 2 x 4 ## name age sex treatment ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John 30 M &lt;NA&gt; ## 2 Mary NA F A "],
["references.html", "References", " References Ahmadia, Aron, James Allen, Alison Appling, Sean Aubin, Pete Bachant, Piotr Banaszkiewicz, Pauline Barmby, et al. 2016. “Software Carpentry: Version Control with Git.” https://doi.org/10.5281/zenodo.57467. Hannay, Jo Erskine, Hans Petter Langtangen, Carolyn MacLeod, Dietmar Pfahl, Janice Singer, and Greg Wilson. 2009. “How Do Scientists Develop and Use Scientific Software?” In Proc. 2009 Icse Workshop on Software Engineering for Computational Science and Engineering. Wilson, Greg. 2006. “Software Carpentry: Getting Scientists to Write Better Code by Making Them More Productive.” Computing in Science &amp; Engineering. ———. 2008. “Those Who Will Not Learn from History...” Computing in Science &amp; Engineering. ———. 2016. “Software Carpentry: Lessons Learned.” January 28, 2016. https://doi.org/10.12688/f1000research.3-62.v2. ———. n.d. “Software Carpentry Web Site.” http://software-carpentry.org. Wilson, Gregory. 2009. “How Do Scientists Really Use Computers?” American Scientist. Wilson, Gregory V. 2005. “Where’s the Real Bottleneck in Scientific Computing?” American Scientist. "]
]
